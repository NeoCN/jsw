<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="prop-thread-count-delay">
    <title>wrapper.thread_count_delay Property</title>
    <section>
        <title>Configuration Property Overview</title>
        <itemizedlist>
            <listitem>
                <ulink url="properties.html">Configuration Property Overview</ulink>
            </listitem>
            <listitem>
                <ulink url="props-advanced.html">Advanced Properties</ulink>
            </listitem>
            <listitem>
                <ulink url="properties.html#name">Property List by Name</ulink>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>wrapper.thread_count_delay</title>
        <para>
            By default Java monitors the currently running threads and will cause the
            JVM to begin the shutdown process when it detects that all non-daemon
            threads have completed.  The Java component of the Wrapper has need for
            its own non-daemon threads, meaning that this check will never be satisfied.
        </para>
        <para>
            To make it possible for the Wrapper to tell when an application has
            completed and shutdown in the same way that a standalone JVM does, the
            Wrapper does its own thread counting.   Normally, this property should
            never be touched.  But there have been certain cases reported where under
            heavy loads an application's main thread may not actually be started
            before the first thread count.  This was resulting in the Wrapper thinking
            the application had completed and shutting down.
        </para>
        <para>
            The default value of this property has been set to one second.  Versions of
            the Wrapper before the property was introduced effectively had a value of
            0.  This alone will resolve the problem in most cases.  Secondly, the
            WrapperSimpleApp and WrapperStartStopApp classes were modified to make the
            original problem impossible.  There may still be cases when writing custom
            WrapperListener implementations where this value may need to be extended.
        </para>
        <informalexample>
            <simpara><emphasis>Example:</emphasis></simpara>
            <screen format="linespecific"><![CDATA[wrapper.thread_count_delay=1]]></screen>
        </informalexample>
    </section>
</chapter>
