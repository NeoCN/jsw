<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="api-overview">
 
    <title>API Overview</title> 

    <section>
        <title>Launching Your Application Under Wrapper</title>
        <section>
            <title>Windows NT/2000</title>
            <para>
                To run your application as a console app, execute the following command.
                <informalexample>
                    <screen format="linespecific">C:\MyApp\bin> Wrapper.exe -c C:\MyApp\conf\wrapper.conf</screen>
                </informalexample>
            </para>
            <para>
                To install the application as an NT service, execute.
                <informalexample>
                    <screen format="linespecific">C:\MyApp\bin> Wrapper.exe -i C:\MyApp\conf\wrapper.conf</screen>
                </informalexample>
            </para>
            <para>
                This will create a file in the bin directory called ~serviceMyApp.exe This file contains all information needed to execute your application as an NT service and should not be run manually.
            </para>
            <para>
                Then to start it, either reboot, go to the services control panel, or execute:
                <informalexample>
                    <screen format="linespecific">C:\MyApp\bin> net start MyApp</screen>
                </informalexample>
            </para>
            <para>
                To uninstall the application as an NT service, execute:
                <informalexample>
                    <screen format="linespecific">C:\MyApp\bin> Wrapper.exe -r C:\MyApp\conf\wrapper.conf</screen>
                </informalexample>
            </para>
            <para>
                These commands should normally be placed in batch files in the application's bin directory to make them easier to use.
            </para>
            <para>
                A typical application would have the following three batch files in the bin directory with the Wrapper.exe file.  The scripts will look for a wrapper.conf file passed in as an argument and then use a default if one is not specified.  These examples assume that the '@app.home@' token will be replaced with your application's home directory on installation.  Something like 'C:\MyApp'.  The quotes around the paths in the scripts make it possible for the path to contain spaces.
                <informalexample>
                    <simpara><emphasis>MyApp.bat</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[@echo off

set _WRAPPER_CONF="%~f1"
if not %_WRAPPER_CONF%=="" goto startup
set _WRAPPER_CONF="@app.home@\conf\wrapper.conf"

:startup
"@app.home@\bin\Wrapper.exe" -c %_WRAPPER_CONF%
if not errorlevel 1 goto end
pause

:end
set _WRAPPER_CONF=]]></screen>
                </informalexample>
                <informalexample>
                    <simpara><emphasis>InstallMyApp-NT.bat</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[@echo off

set _WRAPPER_CONF="%~f1"
if not %_WRAPPER_CONF%=="" goto startup
set _WRAPPER_CONF="@app.home@\conf\wrapper.conf"

:startup
"@app.home@\bin\Wrapper.exe" -i %_WRAPPER_CONF%
if not errorlevel 1 goto end
pause

:end
set _WRAPPER_CONF=]]></screen>
                </informalexample>
                <informalexample>
                    <simpara><emphasis>UninstallMyApp-NT.bat</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[@echo off

set _WRAPPER_CONF="%~f1"
if not %_WRAPPER_CONF%=="" goto startup
set _WRAPPER_CONF="@app.home@\conf\wrapper.conf"

:startup
"@app.home@\bin\Wrapper.exe" -r %_WRAPPER_CONF%
if not errorlevel 1 goto end
pause

:end
set _WRAPPER_CONF=]]></screen>
                </informalexample>
            </para>
            <para>
                It is also possible to make batch scripts which use only relative paths.  This has the benefit of allowing you to unzip an application and run it in any location, but it has the drawback that the script will not work correctly if the current working directory is not the same as the that of the batch file.
                <informalexample>
                    <simpara><emphasis>MyApp.bat</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[@echo off

set _WRAPPER_CONF="%~f1"
if not %_WRAPPER_CONF%=="" goto startup
set _WRAPPER_CONF=..\conf\wrapper.conf

:startup
Wrapper.exe -c %_WRAPPER_CONF%
if not errorlevel 1 goto end
pause

:end
set _WRAPPER_CONF=]]></screen>
                </informalexample>
            </para>
            <para>
                Starting in version 2.2.3, it is possible to specify paths in your wrapper.conf file which are relative to the Wrapper.exe file.  Older versions require that all paths be absolute.
            </para>
        </section>
        <section>
            <title>Linux/Solaris</title>
            <para>
                To run your application from the command line:
                <informalexample>
                    <screen format="linespecific">$ wrapper [your application's wrapper config file]</screen>
                </informalexample>
            </para>
            <para>
                In the src/bin subdirectory you will find some shell (bash and sh)script templates for starting and stopping wrapped applications cleanly in. To use these scripts with your application, just set the APP_HOME (base dir of your application), APP_NAME, APP_LONG_NAME, and WRAPPER_CONF (path to your application's wrapper config file) variables in the scripts to the appropriate values.
            </para>
            <para>
                You may need to tweak some of the other values (like PIDDIR in the sh script) to get them to fit your environment.
            </para>
            <para>
                <informalexample>
                    <simpara><emphasis>bash script</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[#! /bin/bash

#
# Skeleton bash script suitable for starting and stopping 
# wrapped Java apps on the Linux platform.
#

# Application
APP_HOME="@app.home@"
APP_NAME="@app.name@"
APP_LONG_NAME="@app.long.name@"

# Wrapper
WRAPPER_CMD="$APP_HOME/bin/wrapper"
WRAPPER_CONF="@app.wrapper.conf@"

# Find pidof.
PIDOF="/bin/pidof"
if [ ! -x $PIDOF ]
then
    PIDOF="/sbin/pidof"
    if [ ! -x $PIDOF ]
    then
        echo "Cannot find 'pidof' in /bin or /sbin."
        echo "This script requires 'pidof' to run."
        exit 1
    fi
fi

start() {
    echo "Starting $APP_LONG_NAME..."
    pid=`$PIDOF $APP_NAME`
    if [ -z $pid ]
    then
        exec -a $APP_NAME $WRAPPER_CMD $WRAPPER_CONF &
    else
        echo "$APP_LONG_NAME is already running."
        exit 1
    fi
}

stop() {
    echo "Stopping $APP_LONG_NAME..."
    pid=`$PIDOF $APP_NAME`
    if [ -z $pid ]
    then
        echo "$APP_LONG_NAME was not running."
    else
        kill $pid
        sleep 6

        pid=`$PIDOF $APP_NAME`
        if [ ! -z $pid ]
        then
            kill -9 $pid
        fi

        pid=`$PIDOF $APP_NAME`
        if [ ! -z $pid ]
        then
            echo "Failed to stop $APP_LONG_NAME."
        else
            echo "Stopped $APP_LONG_NAME."
        fi
    fi
}

case "$1" in

    'start')
        start
        ;;

    'stop')
        stop
        ;;

    'restart')
        stop
        start
    ;;

    *)
        echo "Usage: $0 { start | stop | restart }"
        exit 1
        ;;
esac

exit 0]]></screen>
                </informalexample>
                <informalexample>
                    <simpara><emphasis>sh script</emphasis></simpara>
                    <screen format="linespecific"><![CDATA[#! /bin/sh

#
# Skeleton sh script suitable for starting and stopping 
# wrapped Java apps on the Solaris platform.
#
# Make sure that PIDFILE points to the correct location,
# if you have changed the default location set in the 
# wrapper configuration file.
#

# Application
APP_HOME="@app.home@";
APP_NAME="@app.name@";
APP_LONG_NAME="@app.long.name@";

# Wrapper
WRAPPER_CMD="$APP_HOME/bin/wrapper";
WRAPPER_CONF="@app.wrapper.conf@";

# Process ID
PIDDIR="/var/run"
PIDFILE="$PIDDIR/$APP_NAME.pid"
pid=""

getpid() {
    if [ -f $PIDFILE ]
    then
    if [ -r $PIDFILE ]
    then
        pid=`cat $PIDFILE`
        if [ "X$pid" != "X" ]
        then
        # Verify that a process with this pid is still running.
        pid=`/usr/bin/ps -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
        if [ "X$pid" = "X" ]
        then
            # This is a stale pid file.
            rm -f $PIDFILE
            echo "Removed stale pid file: $PIDFILE"
        fi
        fi
    else
        echo "Cannot read $PIDFILE."
        rm -f $PIDFILE
        exit 1
    fi
    fi
}
 
start() {
    echo "Starting $APP_LONG_NAME..."
    getpid
    if [ "X$pid" = "X" ]
    then
        exec $WRAPPER_CMD $WRAPPER_CONF &
    else
        echo "$APP_LONG_NAME is already running."
        exit 1
    fi
}
 
stop() {
    echo "Stopping $APP_LONG_NAME..."
    getpid
    if [ "X$pid" = "X" ]
    then
        echo "$APP_LONG_NAME was not running."

    else
        kill $pid
        sleep 6

        pid=`/usr/bin/ps -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`

        if [ "X$pid" != "X" ]
        then
        # SIGTERM didn't work, send SIGKILL.
            kill -9 $pid
        rm -f $PIDFILE

            pid=`/usr/bin/ps -p $pid | grep $pid | grep -v grep | awk '{print $1}' | tail -1`
        fi

        if [ "X$pid" != "X" ]
        then
            echo "Failed to stop $APP_LONG_NAME."
            exit 1
        else
            echo "Stopped $APP_LONG_NAME."
        fi
    fi
}

case "$1" in

    'start')
        start
        ;;

    'stop')
        stop
        ;;

    'restart')
        stop
        start
    ;;

    *)
        echo "Usage: $0 { start | stop | restart }"
        exit 1
        ;;
esac

exit 0]]></screen>
                </informalexample>
            </para>
        </section>
    </section>
</chapter>
