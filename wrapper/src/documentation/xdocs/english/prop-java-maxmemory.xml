<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="prop-java-maxmemory">
    <title>wrapper.java.maxmemory Property</title>
    <section>
        <title>Configuration Property Overview</title>
        <itemizedlist>
            <listitem>
                <ulink url="properties.html">Configuration Property Overview</ulink>
            </listitem>
            <listitem>
                <ulink url="props-jvm.html">JVM Configuration Properties</ulink>
            </listitem>
            <listitem>
                <ulink url="properties.html#name">Property List by Name</ulink>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>wrapper.java.maxmemory</title>
        <para>
            The maximum amount of memory in megabytes that the JVM will be
            allowed to use.  The default value is 64 Mb.  This is the same
            as the Sun JVM.  Valid values are in the range 1 to 4096Mb.  The
            value must be greater than or equal to the value set for the
            <ulink url="prop-java-initmemory.html">wrapper.java.initmemory</ulink>
            property.
        </para>
        <informalexample>
            <simpara><emphasis>Example:</emphasis></simpara>
            <screen format="linespecific"><![CDATA[wrapper.java.maxmemory=64]]></screen>
        </informalexample>
        <para>
            <note>
                <simpara>
                    If an application is experiencing
                    <literal moreinfo="none">java.lang.OutOfMemoryErrors</literal>
                    then this often indicates that the maximum amount of memory
                    available to the application needs to be increased.  Be
                    aware that setting the maximum memory to a value which is
                    greater than the amount of actual memory on the machine
                    will result in memory swapping.  Memory swapping is a
                    function of the operating system, and thus its performance
                    is highly operating system specific.  However from
                    experience this tends to result in a large decrease in
                    application performance. In most cases, it is better to
                    set the maximum memory to a value which fits within
                    available memory and then rely on Java's garbage
                    collection.
                </simpara>
            </note>
        </para>
    </section>
</chapter>
