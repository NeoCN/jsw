<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="integrate-listener">
    <title>WrapperListener Integration</title>
    <section>
        <title>Integration Methods</title>
        <itemizedlist>
            <listitem>
                <ulink url="integrate.html">Methods of Integrating with the Java Service Wrapper</ulink>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Method 3 - WrapperListener Integration</title>
        <itemizedlist>
            <listitem>
                <ulink url="#overview">Overview</ulink>
            </listitem>
            <listitem>
                <ulink url="#detailed">Detailed Instructions</ulink>
            </listitem>
        </itemizedlist>
        <section id="overview">
            <title>Overview</title>
            <para>
                The third and final method, while providing the most flexibility and
                access to all of the Wrapper's features, is also the only one which
                requires some coding to complete the integration.  This method
                involves creating a class which implements the
                <literal moreinfo="none">WrapperListener</literal> interface.  An
                instance of the user class is then instantiated and registered with
                the <literal moreinfo="none">WrapperManager</literal>.
            </para>
            <para>
                While this method provides features that are not available with
                either of the first two methods, it does add some complexity.
                If the additional features are not required, implementing a
                shutdown hook to enable the use of Method 1, or implementing
                a shutdown class should be considered as options.  The main method
                of a shutdown class can be as simple as just calling a shutdown
                method in the application.
            </para>
            <para>
                This method will explain how the TestWrapper application which ships
                with the Wrapper works.
            </para>
            <para>
                This document will not cover the installation of the Wrapper files
                or scripts which will be used to launch the application.  Both of
                these subjects are covered in detail in the descriptions of the
                first two integration methods.
            </para>
        </section>
        <section id="detailed">
            <title>Detailed Instructions</title>
            <section>
                <title>The Application Main Class</title>
                <para>
                    There are really no restrictions on what the main class of an
                    application will look like.  The main class must register an
                    instance of the <literal moreinfo="none">WrapperListener</literal>
                    interface with the <literal moreinfo="none">WrapperManager</literal>
                    class using the <literal moreinfo="none">start</literal> method as
                    soon after the JVM has been launched as possible.
                </para>
                <para>
                    Before explaining the process in too much detail, we will start with
                    an example main class and then explain each of its components.  The
                    code below is a simple class which implements the
                    <literal moreinfo="none">WrapperListener</literal> interface and
                    contains a main method which instantiates the class and calls
                    start on the <literal moreinfo="none">WrapperManager</literal>.
                </para>
                <informalexample>
                    <screen format="linespecific"><![CDATA[import org.tanukisoftware.wrapper.WrapperManager;
import org.tanukisoftware.wrapper.WrapperListener;
                    
public class Main
    implements WrapperListener
{
    private MyApp m_app;

    /*---------------------------------------------------------------
     * Constructors
     *-------------------------------------------------------------*/
    private Main()
    {
    }

    /*---------------------------------------------------------------
     * WrapperListener Methods
     *-------------------------------------------------------------*/
    /**
     * The start method is called when the WrapperManager is signaled by the 
     *	native wrapper code that it can start its application.  This
     *	method call is expected to return, so a new thread should be launched
     *	if necessary.
     *
     * @param args List of arguments used to initialize the application.
     *
     * @return Any error code if the application should exit on completion
     *         of the start method.  If there were no problems then this
     *         method should return null.
     */
    public Integer start( String[] args )
    {
        m_app = new MyApp( args );
        m_app.start();

        return null;
    }

    /**
     * Called when the application is shutting down.  The Wrapper assumes that
     *  this method will return fairly quickly.  If the shutdown code code
     *  could potentially take a long time, then WrapperManager.stopping()
     *  should be called to extend the timeout period.  If for some reason,
     *  the stop method can not return, then it must call
     *  WrapperManager.stopped() to avoid warning messages from the Wrapper.
     *
     * @param exitCode The suggested exit code that will be returned to the OS
     *                 when the JVM exits.
     *
     * @return The exit code to actually return to the OS.  In most cases, this
     *         should just be the value of exitCode, however the user code has
     *         the option of changing the exit code if there are any problems
     *         during shutdown.
     */
    public int stop( int exitCode )
    {
        m_app.stop();
    }
    
    /**
     * Called whenever the native wrapper code traps a system control signal
     *  against the Java process.  It is up to the callback to take any actions
     *  necessary.  Possible values are: WrapperManager.WRAPPER_CTRL_C_EVENT, 
     *    WRAPPER_CTRL_CLOSE_EVENT, WRAPPER_CTRL_LOGOFF_EVENT, or 
     *    WRAPPER_CTRL_SHUTDOWN_EVENT
     *
     * @param event The system control signal.
     */
    public void controlEvent( int event )
    {
    }
    
    /*---------------------------------------------------------------
     * Main Method
     *-------------------------------------------------------------*/
    public static void main( String[] args )
    {
        // Start the application.  If the JVM was launched from the native
        //  Wrapper then the application will wait for the native Wrapper to
        //  call the application's start method.  Otherwise the start method
        //  will be called immediately.
        WrapperManager.start( new Main(), args );
    }
}]]></screen>
                </informalexample>
            </section>
            <section>
                <title>The Main Method</title>
                <para>
                    The main method should in most cases be extremely simple.  It has
                    the job of instantiating a class which implements
                    <literal moreinfo="none">WrapperListener</literal> instance and
                    then passing that instance along with any arguments to the
                    <literal moreinfo="none">start</literal> method of the
                    <literal moreinfo="none">WrapperManager</literal> class.
                    While it is not a strict rule, in general, the main method should
                    do nothing else.  All application initialization should be
                    performed from within the start method.
                </para>
            </section>
            <section>
                <title>Constructor</title>
                <para>
                    
                </para>
            </section>
            <section>
                <title>WrapperListener start Method</title>
                <para>
                    
                </para>
            </section>
            <section>
                <title>WrapperListener stop Method</title>
                <para>
                    
                </para>
            </section>
            <section>
                <title>WrapperListener controlEvent Method</title>
                <para>
                    
                </para>
            </section>
        </section>
    </section>
</chapter>
