<?xml version="1.0"?>

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../dtd/docbook/4.1.2/docbookx.dtd">

<!-- ********************************************************************
     $Id$
     ******************************************************************** -->

<chapter id="api-overview">
 
    <title>API Overview</title> 

    <section>
        <title>Overview of the Wrapper's Java API</title>
        <para>
            The Java-side API for Wrapper is quite simple and can be run in one of two modes.
        </para>
        <section>
            <title>Using the WrapperSimpleApp class</title>
            <para>
                The first is to use the WrapperSimpleApp class to launch your Java application with out any modifications.  This class handles all communication with the native wrapper and simply launches your application by calling its main method as would be done from the command line.
            </para>
            <para>
                The drawback to this method is that when your service is stopped, it is killed as if the user had hit CTRL-C in the console.  This means that your application may not be able to shut itself down cleanly.  One option that you have is to register a shutdown hook.  A shutdown hook is a thread that is run when a JVM shuts down normally.  See the java.lang.Runtime.addShutdownHook javadocs for more information.
            </para>
            <para>
                The benefit is that almost any Java application will work as is using this class.  All you need to do is set the following properties in your wrapper.conf file.  They are described in detail in the <ulink url="config-overview.html">Configuration Overview</ulink>.
                <programlisting format="linespecific"># Set the main class to be the WrapperSimpleApp
wrapper.java.mainclass=com.silveregg.wrapper.WrapperSimpleApp

# Set the first application parameter to the name of the class whose main method
# is to be launched.  Additional parameters come after this one.
wrapper.app.parameter.1=com.widgetsrus.MyAppMain
wrapper.app.parameter.2=parameter1
wrapper.app.parameter.3=parameter2

# Be sure to set your classpath.
wrapper.java.classpath.1=../lib/wrapper.jar
wrapper.java.classpath.2=../lib/myapp.jar</programlisting>
                In most cases, that should be it.  Your application can now be launched using the scripts found in the <ulink url="launch-overview.html">Launch Overview</ulink>.
            </para>
        </section>
        <section>
            <title>Implement the WrapperListener interface</title>
            <para>
                The second and recommended method is to have your application implement the WrapperListener interface.  This interface provides three methods used to inform your application when it should start and stop as well as when a system control event takes place (for example, the user hitting CTRL-C, or logging out under windows)
            </para>
            <para>
                The WrapperListener class has the following methods.
                <programlisting format="linespecific">public interface WrapperListener {
    /**
     * The start method is called when the WrapperManager is signaled by the 
     *	native wrapper code that it can start its application.  This
     *	method call is expected to return, so a new thread should be launched
     *	if necessary.
     * If there are any problems, then an Integer should be returned, set to
     *	the desired exit code.  If the application should continue,
     *	return null.
     */
    Integer start(String[] args);
    
    /**
     * Called when the application is shutting down.  The Wrapper assumes that
     *  this method will return fairly quickly.  If the shutdown code code
     *  could potentially take a long time, then WrapperManager.stopping()
     *  should be called to extend the timeout period.  If for some reason,
     *  the stop method can not return, then it must call
     *  WrapperManager.stopped() to avoid warning messages from the Wrapper.
     *
     * @param exitCode The suggested exit code that will be returned to the OS
     *                 when the JVM exits.
     *
     * @return The exit code to actually return to the OS.  In most cases, this
     *         should just be the value of exitCode, however the user code has
     *         the option of changing the exit code if there are any problems
     *         during shutdown.
     */
    int stop(int exitCode);
    
    /**
     * Called whenever the native wrapper code traps a system control signal
     *  against the Java process.  It is up to the callback to take any actions
     *  necessary.  Possible values are: WrapperManager.WRAPPER_CTRL_C_EVENT, 
     *    WRAPPER_CTRL_CLOSE_EVENT, WRAPPER_CTRL_LOGOFF_EVENT, or 
     *    WRAPPER_CTRL_SHUTDOWN_EVENT
     */
    void controlEvent(int event);
}</programlisting>
            </para>
            <para>
                An application implementing the WrapperListener should not directly start the application in the main method.  Everything that would normally be in the main method should be moved into the start method.
            </para>
            <para>
                The main method should simply contain the following code:
                <programlisting format="linespecific">public class MyApp implements WrapperListener {
    ... Application methods ...
    ... WrapperListener methods...

    public static void main(String[] args) {
        // Start the application.  If the JVM was launched from the native
        //  Wrapper then the application will wait for the native Wrapper to
        //  call the application's start method.  Otherwise the start method
        //  will be called immediately.
        WrapperManager.start(new MyApp(), args);
    }
}</programlisting>
            </para>
        </section>
        <section>
            <title>API Available to Your Application</title>
            <para>
                It is often necessary for your application to control its own lifecycle as a service.  This includes requesting that your application be stopped or restarted.
            </para>
            <para>
                The Java Service Wrapper allows your application access to the Wrapper via the WrapperManager class.
            </para>
            <para>
                Please see the <ulink url="javadocs.html">JavaDocs</ulink> for details.
            </para>
        </section>
    </section> 
</chapter>
